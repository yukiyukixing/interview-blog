(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{296:function(e,t,r){e.exports=r.p+"assets/img/vector.a20d3b50.png"},309:function(e,t,r){"use strict";r.r(t);var a=r(10),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_8-3d"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-3d"}},[e._v("#")]),e._v(" 8.3D")]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene",target:"_blank",rel:"noopener noreferrer"}},[e._v("three.js官网文档"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"_1-three-js-中点击拾取是怎么做的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-three-js-中点击拾取是怎么做的"}},[e._v("#")]),e._v(" 1.Three.js 中点击拾取是怎么做的")]),e._v(" "),t("ul",[t("li",[e._v("在 Three.js 中，点击拾取（或称射线拾取）是指识别用户点击或者触摸屏幕时，与之相交的 3D 对象的过程。这通常是通过射线投射（Raycasting）来实现的。")])]),e._v(" "),t("h2",{attrs:{id:"_2-描述一下-three-js-的主要组成和工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-描述一下-three-js-的主要组成和工作原理"}},[e._v("#")]),e._v(" 2.描述一下 Three.js 的主要组成和工作原理")]),e._v(" "),t("p",[e._v("Three.js是一个基于webgl封装的3D可视化的图形库。")]),e._v(" "),t("ul",[t("li",[t("ol",[t("li",[e._v("主要组成:")])])]),e._v(" "),t("li",[t("p",[e._v("1.场景（Scene）: 一个场景代表了一个3D的空间，里面包含了物体、光源等元素。想象它就像一个3D的舞台。")])]),e._v(" "),t("li",[t("p",[e._v("2.相机（Camera）: 相机定义了从哪个视角查看场景。Three.js 提供了多种相机，如正交相机（OrthographicCamera）和透视相机（PerspectiveCamera）。")])]),e._v(" "),t("li",[t("p",[e._v("3.物体（Objects）: 在 Three.js 中，一个物体通常由几何体（Geometry）和材料（Material）组成。几何体定义了物体的形状，而材料定义了物体的表面特性，如颜色、纹理等。")])]),e._v(" "),t("li",[t("p",[e._v("4.光源（Lights）: 光源影响场景中物体的明暗和颜色。Three.js 提供了多种光源，如点光源（PointLight）、方向光（DirectionalLight）、聚光灯（SpotLight）等。")])]),e._v(" "),t("li",[t("p",[e._v("5.渲染器（Renderer）: 负责将场景和相机的信息转化为像素，从而在屏幕上显示3D图像。WebGLRenderer 是 Three.js 中最常用的渲染器，基于 WebGL 实现。")])]),e._v(" "),t("li",[t("p",[e._v("6.动画和交互: Three.js 提供了动画系统和射线投影（Raycasting）等工具来支持动画和交互。")])]),e._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[e._v("工作原理:")])])]),e._v(" "),t("li",[t("p",[e._v("1.初始化: 创建场景、相机、渲染器等基础组件。")])]),e._v(" "),t("li",[t("p",[e._v("2.添加内容: 将物体、光源等添加到场景中。")])]),e._v(" "),t("li",[t("p",[e._v("3.渲染循环: 在动画或交互期间，渲染器会不断地重新绘制场景。")])]),e._v(" "),t("li",[t("p",[e._v("4.渲染器使用场景和相机的数据，通过 WebGL API 绘制每一帧。")])]),e._v(" "),t("li",[t("p",[e._v("5.若有动画或交互，场景中的物体可能会移动或变形，需要在每一帧中更新。")])]),e._v(" "),t("li",[t("p",[e._v("6.交互: 通过监听事件和射线投影检测用户的交互操作。")])]),e._v(" "),t("li",[t("p",[e._v("7.动画: 使用 Three.js 的动画系统或请求动画帧（requestAnimationFrame）来更新场景中物体的状态。")])])]),e._v(" "),t("h2",{attrs:{id:"_3-点和直线的对称点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-点和直线的对称点"}},[e._v("#")]),e._v(" 3.点和直线的对称点")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("1.做垂线，知道了一个在直线上的点")])]),e._v(" "),t("li",[t("p",[e._v("2.然后这条垂线的斜率也是已知的")])]),e._v(" "),t("li",[t("p",[e._v("3.通过直线上的一个点和斜率可以列两个方程，求出对称点。")])])]),e._v(" "),t("blockquote",[t("p",[e._v("向量的方法：")])]),e._v(" "),t("p",[t("img",{attrs:{src:r(296),alt:"vector.png"}})]),e._v(" "),t("h2",{attrs:{id:"_4-判断点是否在一个多边形内"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-判断点是否在一个多边形内"}},[e._v("#")]),e._v(" 4.判断点是否在一个多边形内")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("1.从点 P 向任意方向发出一条射线")])]),e._v(" "),t("li",[t("p",[e._v("2.计算射线与多边形边界的交点数量。")])]),e._v(" "),t("li",[t("p",[e._v("3.如果交点数量是奇数，那么点 P 在多边形内；如果是偶数，点 P 在多边形外。")])])]),e._v(" "),t("h2",{attrs:{id:"webgl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webgl"}},[e._v("#")]),e._v(" webgl")]),e._v(" "),t("h2",{attrs:{id:"shader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shader"}},[e._v("#")]),e._v(" shader")])])}),[],!1,null,null,null);t.default=s.exports}}]);